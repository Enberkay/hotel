const prisma = require("../config/prisma")
const { calculateBookingTotal, processAddons } = require('../services/bookingService');
const logger = require('../utils/logger');

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (config)
const ROOM_TYPE_PRICES = {
    SINGLE: 500,      // ‡πÄ‡∏ï‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß
    DOUBLE: 500,     // ‡πÄ‡∏ï‡∏µ‡∏¢‡∏á‡∏Ñ‡∏π‡πà
    SIGNATURE: 1500  // signature
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
exports.createBooking = async (req, res) => {
    try {
        const { count, roomType, checkInDate, checkOutDate, addon } = req.validated;
        const { userEmail } = req.user;

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô customer ‡∏à‡∏≤‡∏Å userEmail
        const customer = await prisma.user.findFirst({
            where: {
                userEmail,
                userRole: 'customer'
            },
            select: {
                userId: true,
            }
        });

        if (!customer) {
            return res.status(403).json({ message: "Customer not found or unauthorized" });
        }
        const customerId = customer.userId;
        const customerDiscount = 0;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
        const checkIn = new Date(checkInDate);
        const checkOut = new Date(checkOutDate);
        if (checkIn >= checkOut) {
            return res.status(400).json({ message: "Check-in date must be before check-out date" });
        }

        // ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å config
        const price = ROOM_TYPE_PRICES[roomType];
        if (!price) {
            return res.status(400).json({ message: "Invalid room type" });
        }

        const daysBooked = Math.ceil((checkOut - checkIn) / (1000 * 60 * 60 * 24));
        const { totalAddon, addonListData } = await processAddons(addon);
        const lastTotal = calculateBookingTotal(price, daysBooked, totalAddon, customerDiscount);

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á Booking
        const newBooking = await prisma.booking.create({
            data: {
                customer: { connect: { userId: customerId } },
                roomType, // enum
                count: Number(count),
                checkInDate: checkIn,
                checkOutDate: checkOut,
                total: lastTotal,
                confirmedAt: null,
                bookingStatus: 'PENDING',
            }
        });

        // Addon
        if (addonListData.length > 0) {
            const newBookingAddonList = await prisma.bookingAddonList.create({ data: {} });
            await prisma.bookingAddon.createMany({
                data: addonListData.map(a => ({
                    bookingAddonListId: newBookingAddonList.bookingAddonListId,
                    addonId: a.addonId,
                    quantity: a.quantity
                }))
            });
            await prisma.bookingAddonListRelation.create({
                data: {
                    bookingId: newBooking.bookingId,
                    bookingAddonListId: newBookingAddonList.bookingAddonListId,
                    price: totalAddon
                }
            });
        }

        res.status(201).json({ message: "Booking created successfully", booking: newBooking });
        logger.info('Create booking: userId=%s, bookingId=%s', customerId, newBooking.bookingId);
    } catch (err) {
        logger.error('Create booking error: %s', err.stack || err.message);
        res.status(500).json({ message: "Failed to create booking", error: err.message });
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.listBookings = async (req, res) => {
    try {
        const bookings = await prisma.booking.findMany({
            include: {
                customer: {
                    select: {
                        userId: true,
                        userEmail: true,
                        userName: true,
                        userSurName: true,
                        userNumPhone: true,
                        prefix: true
                    }
                },
                bookingStatus: true, // ‡∏ñ‡πâ‡∏≤ bookingStatus ‡∏°‡∏µ field ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÉ‡∏´‡πâ select ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ field ‡∏ô‡∏±‡πâ‡∏ô
                roomType: { select: { roomTypeName: true } },
                BookingAddonListRelation: {
                    include: {
                        bookingAddonList: {
                            include: {
                                BookingAddon: {
                                    include: {
                                        addon: { select: { addonName: true, price: true } }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            orderBy: {
                createdAt: "desc"
            }
        })
        res.status(200).json(bookings)
    } catch (err) {
        logger.error('List bookings error: %s', err.stack || err.message);
        res.status(500).json({
            message: "Failed to retrieve bookings",
            error: err.message,
        })
    }
}

exports.readBooking = async (req, res) => {
    try {
        const { id } = req.params
        const booking = await prisma.booking.findFirst({
            where: { bookingId: Number(id) },
            include: {
                customer: {
                    select: {
                        userId: true,
                        userEmail: true,
                        userName: true,
                        userSurName: true,
                        userNumPhone: true,
                        prefix: true
                    }
                },
                roomType: { select: { roomTypeName: true, price: true } },
                BookingAddonListRelation: {
                    include: {
                        bookingAddonList: {
                            include: {
                                BookingAddon: {
                                    include: {
                                        addon: { select: { addonName: true, price: true } }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        })
        if (!booking) {
            return res.status(404).json({ message: "Booking not found" })
        }
        res.status(200).json(booking)
    } catch (err) {
        logger.error('Read booking error: %s', err.stack || err.message);
        res.status(500).json({ message: "Failed to retrieve booking", error: err.message })
    }
}

exports.confirmBooking = async (req, res) => {
    try {
        const { roomId } = req.body;  // ‡∏£‡∏±‡∏ö roomId ‡∏à‡∏≤‡∏Å Client
        const { id } = req.params;  // ‡∏£‡∏±‡∏ö bookingId ‡∏à‡∏≤‡∏Å URL param
        const { userEmail } = req.user;  // ‡∏î‡∏∂‡∏á userEmail ‡∏à‡∏≤‡∏Å JWT (‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà)

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
        if (!roomId || !id) {
            return res.status(400).json({ message: "Missing required fields: roomId and bookingId are required" });
        }

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á
        const room = await prisma.room.findUnique({
            where: { roomId: Number(roomId) },
            select: { roomStatus: true, pairRoomId: true }
        });

        if (!room) {
            return res.status(404).json({ message: "Room not found" });
        }

        if (room.roomStatus !== 'AVAILABLE') {
            return res.status(400).json({ message: "Room is not available for booking" });
        }

        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ frontId ‡∏Ç‡∏≠‡∏á‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà
        const frontUser = await prisma.user.findFirst({
            where: {
                userEmail,
                userRole: 'front'
            },
            select: { userId: true }
        });

        if (!frontUser) {
            return res.status(403).json({ message: "Front Desk user not found or unauthorized" });
        }

        // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô Signature Room ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        let mainRoomId = roomId;
        let secondRoomId = null;

        if (room.pairRoomId) {
            mainRoomId = Math.min(roomId, room.pairRoomId); // ‡πÉ‡∏ä‡πâ‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏Å
            secondRoomId = Math.max(roomId, room.pairRoomId); // ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ô
        }

        // ‚úÖ ‡πÉ‡∏ä‡πâ Transaction ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Booking ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á
        const updatedBooking = await prisma.$transaction(async (prisma) => {
            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
            const booking = await prisma.booking.update({
                where: { bookingId: Number(id) },
                data: {
                    room: { connect: { roomId: Number(mainRoomId) } },
                    pairRoom: secondRoomId ? { connect: { roomId: Number(secondRoomId) } } : undefined,
                    front: { connect: { userId: frontUser.userId } },
                    bookingStatus: 'CONFIRMED',
                    confirmedAt: new Date()
                }
            });

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å
            await prisma.room.update({
                where: { roomId: Number(mainRoomId) },
                data: { roomStatus: 'RESERVED' }
            });

            // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏´‡πâ‡∏≠‡∏á Signature ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢
            if (secondRoomId) {
                await prisma.room.update({
                    where: { roomId: Number(secondRoomId) },
                    data: { roomStatus: 'RESERVED' }
                });
            }

            return booking;
        });

        let message = `Booking confirmed for room ${mainRoomId}`;
        if (secondRoomId) {
            message += ` and ${secondRoomId} (Signature Room)`;
        }

        res.status(200).json({ message, booking: updatedBooking });
        logger.info('Confirm booking: bookingId=%s, roomId=%s, userEmail=%s', id, roomId, userEmail);
    } catch (err) {
        logger.error('Confirm booking error: %s', err.stack || err.message);
        res.status(500).json({ message: "Server error" });
    }
};








