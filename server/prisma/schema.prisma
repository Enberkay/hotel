// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

//prisma ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á relationship ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡πÉ‡∏™‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ

model User {
    userId       Int      @id @default(autoincrement())
    userEmail    String   @unique // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô User
    userPassword String?
    userName     String? // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô User
    userSurName  String? // ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô User
    userNumPhone String?  @unique // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô User
    userRole     UserRole @default(customer)
    prefix       String? //‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
    licensePlate String?
    userEnable   Boolean  @default(true)
    createdAt    DateTime @default(now())

    // Relationships
    Customer     Customer?
    Housekeeping Housekeeping?
    Maintenance  Maintenance?
    Front        Front?
}

enum UserRole {
    admin
    customer
    front
    housekeeping
    maintenance
}

model Customer {
    customerId Int     @id @default(autoincrement())
    stdId      String? @unique
    idCard     String?
    userId     Int     @unique // Foreign key to User model
    user       User    @relation(fields: [userId], references: [userId], onDelete: Cascade) // Relationship with User

    customerTypeId Int          @default(1) // FK to CustomerType
    customerType   CustomerType @relation(fields: [customerTypeId], references: [customerTypeId])

    Receipt Receipt[]
    Booking Booking[]

    images Image[]
}

model CustomerType {
    customerTypeId   Int    @id @default(autoincrement())
    customerTypeName String
    discount         Int

    Customer Customer[]
}

model Front {
    frontId Int @id @default(autoincrement())

    userId Int  @unique // Foreign key to User model
    user   User @relation(fields: [userId], references: [userId], onDelete: Cascade) // Relationship with User

    CleaningRequest CleaningRequest[]
    CleaningReport  CleaningReport[]
    RepairRequest   RepairRequest[]
    RepairReport    RepairReport[]

    Booking Booking[]

    Receipt Receipt[]
}

model Housekeeping {
    housekeepingId Int @id @default(autoincrement())

    assignedFloor String @default("3")

    userId Int  @unique // Foreign key to User model
    user   User @relation(fields: [userId], references: [userId], onDelete: Cascade) // Relationship with User

    CleaningRequest CleaningRequest[]
    CleaningReport  CleaningReport[]
}

model CleaningRequest {
    requestId Int @id @default(autoincrement())

    //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
    requestAt DateTime @default(now())

    //‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏°‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
    receiveAt DateTime?

    //‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà
    updatedAt DateTime @default(now()) @updatedAt // **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ default**

    housekeepingId Int?
    housekeeping   Housekeeping? @relation(fields: [housekeepingId], references: [housekeepingId])

    frontId Int
    front   Front @relation(fields: [frontId], references: [frontId])

    cleaningRequestStatusId Int                   @default(1)
    cleaningRequestStatus   CleaningRequestStatus @relation(fields: [cleaningRequestStatusId], references: [cleaningRequestStatusId])

    CleaningRequestRoom CleaningRequestRoom[]

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏ö‡∏ö 1:1 ‡∏Å‡∏±‡∏ö CleaningReport
    CleaningReport CleaningReport?
}

model CleaningRequestStatus {
    cleaningRequestStatusId   Int               @id @default(autoincrement())
    cleaningRequestStatusName String            @unique //‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£, ‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß(‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î), ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    CleaningRequest           CleaningRequest[]
}

model CleaningRequestRoom {
    requestId Int
    roomId    Int

    description String? @default("") //‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏

    //‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà
    updatedAt DateTime @default(now()) @updatedAt // **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ default**

    cleaningRequest CleaningRequest @relation(fields: [requestId], references: [requestId], onDelete: Cascade)
    room            Room            @relation(fields: [roomId], references: [roomId], onDelete: Cascade)

    @@id([requestId, roomId]) // Composite Primary Key
}

model CleaningReport {
    reportId Int      @id @default(autoincrement())
    //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
    reportAt DateTime @default(now())

    housekeepingId Int
    housekeeping   Housekeeping @relation(fields: [housekeepingId], references: [housekeepingId])

    frontId Int?
    front   Front? @relation(fields: [frontId], references: [frontId])

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö CleaningRequest ‡πÅ‡∏ö‡∏ö 1:1
    requestId       Int             @unique
    cleaningRequest CleaningRequest @relation(fields: [requestId], references: [requestId], onDelete: Cascade)

    CleaningResults CleaningResults[]

    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå M:N ‡∏Å‡∏±‡∏ö Room ‡∏ú‡πà‡∏≤‡∏ô CleaningReportRoom
    CleaningReportRoom CleaningReportRoom[]

    cleaningReportStatusId Int                  @default(1)
    cleaningReportStatus   CleaningReportStatus @relation(fields: [cleaningReportStatusId], references: [cleaningReportStatusId])
}

model CleaningReportStatus {
    cleaningReportStatusId   Int              @id @default(autoincrement())
    cleaningReportStatusName String           @unique //‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö, ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß, ‡∏ñ‡∏π‡∏Å‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°
    CleaningReport           CleaningReport[]
}

// üîó **‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö M:N**
model CleaningReportRoom {
    reportId Int
    roomId   Int

    cleaningReport  CleaningReport    @relation(fields: [reportId], references: [reportId], onDelete: Cascade)
    room            Room              @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
    CleaningResults CleaningResults[]

    @@id([reportId, roomId]) // Composite Primary Key
}

model CleaningResults {
    reportId Int
    roomId   Int
    itemId   Int

    description String? @default("") // ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏

    cleaningStatusId Int
    cleaningStatus   CleaningStatus @relation(fields: [cleaningStatusId], references: [cleaningStatusId])

    cleaningReport     CleaningReport     @relation(fields: [reportId], references: [reportId], onDelete: Cascade)
    cleaningList       CleaningList       @relation(fields: [itemId], references: [itemId], onDelete: Cascade)
    cleaningReportRoom CleaningReportRoom @relation(fields: [reportId, roomId], references: [reportId, roomId], onDelete: Cascade)

    @@id([reportId, roomId, itemId]) // Composite Primary Key ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô itemId ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô
}

//‡πÄ‡∏õ‡πá‡∏ô checkList ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô
model CleaningList {
    itemId          Int               @id @default(autoincrement())
    itemName        String
    CleaningResults CleaningResults[]
}

//‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏Å‡∏ï‡∏¥, ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
model CleaningStatus {
    cleaningStatusId   Int               @id @default(autoincrement())
    cleaningStatusName String
    CleaningResults    CleaningResults[]
}

model Maintenance {
    maintenanceId Int  @id @default(autoincrement())
    userId        Int  @unique // Foreign key to User model
    user          User @relation(fields: [userId], references: [userId], onDelete: Cascade) // Relationship with User

    RepairRequest RepairRequest[]
    RepairReport  RepairReport[]
}

//‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°
model RepairRequest {
    requestId Int @id @default(autoincrement())

    //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏ã‡πà‡∏≠‡∏°
    requestAt DateTime @default(now())

    maintenanceId Int?
    maintenance   Maintenance? @relation(fields: [maintenanceId], references: [maintenanceId])

    frontId Int
    front   Front @relation(fields: [frontId], references: [frontId])

    repairRequestStatusId Int                 @default(1)
    repairRequestStatus   RepairRequestStatus @relation(fields: [repairRequestStatusId], references: [repairRequestStatusId])

    RepairRequestRoom RepairRequestRoom[]
    RepairReport      RepairReport?
}

model RepairRequestStatus {
    repairRequestStatusId   Int    @id @default(autoincrement())
    repairRequestStatusName String //‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£, ‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß(‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ã‡πà‡∏≠‡∏°), ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß

    RepairRequest RepairRequest[]
}

//‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°
model RepairRequestRoom {
    requestId Int
    roomId    Int

    description String? //‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏

    repairRequest RepairRequest @relation(fields: [requestId], references: [requestId], onDelete: Cascade)
    room          Room          @relation(fields: [roomId], references: [roomId], onDelete: Cascade)

    @@id([requestId, roomId])
}

//‡πÉ‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°
model RepairReport {
    reportId Int @id @default(autoincrement())

    //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ã‡πà‡∏≠‡∏°
    reportAt DateTime @default(now())

    maintenanceId Int
    maintenance   Maintenance @relation(fields: [maintenanceId], references: [maintenanceId])

    frontId Int
    front   Front @relation(fields: [frontId], references: [frontId])

    requestId     Int           @unique //RepairReport 1:1 RepairRequest
    repairRequest RepairRequest @relation(fields: [requestId], references: [requestId], onDelete: Cascade)

    RepairReportRoom RepairReportRoom[]
}

//‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÉ‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°
model RepairReportRoom {
    reportId Int
    roomId   Int

    description String? //‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏

    repairReport RepairReport @relation(fields: [reportId], references: [reportId], onDelete: Cascade)
    room         Room         @relation(fields: [roomId], references: [roomId], onDelete: Cascade)

    repairStatusId Int          @default(1)
    repairStatus   RepairStatus @relation(fields: [repairStatusId], references: [repairStatusId])

    @@id([reportId, roomId])
}

//‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ [‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß, ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤(‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡πà‡∏≠‡∏°‡πÑ‡∏î‡πâ)]
model RepairStatus {
    repairStatusId   Int                @id @default(autoincrement())
    repairStatusName String

    RepairReportRoom RepairReportRoom[]
}

model Room {
    roomId     Int    @id @default(autoincrement())
    roomNumber String @unique
    floor      String @default("3")

    roomTypeId Int      @default(0)
    roomType   RoomType @relation(fields: [roomTypeId], references: [roomTypeId])

    roomStatusId Int        @default(0)
    roomStatus   RoomStatus @relation(fields: [roomStatusId], references: [roomStatusId])

    pairRoomId Int?
    pairRoom   Room? @relation("RoomPairing", fields: [pairRoomId], references: [roomId])

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ï‡∏£‡∏á‡∏Ç‡πâ‡∏≤‡∏° (back-reference) 
    pairedWith Room[] @relation("RoomPairing")

    createdAt DateTime @default(now())

    Bookings     Booking[] @relation("MainRoom") // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏´‡∏•‡∏±‡∏Å
    PairBookings Booking[] @relation("PairRoom") // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏´‡πâ‡∏≠‡∏á‡∏Ñ‡∏π‡πà

    CleaningRequestRoom CleaningRequestRoom[]
    RepairRequestRoom   RepairRequestRoom[]

    Receipt Receipt[]

    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå M:N ‡∏Å‡∏±‡∏ö CleaningReport ‡∏ú‡πà‡∏≤‡∏ô CleaningReportRoom
    CleaningReportRoom CleaningReportRoom[]

    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå M:N ‡∏Å‡∏±‡∏ö RepairReport ‡∏ú‡πà‡∏≤‡∏ô RepairReportRoom
    RepairReportRoom RepairReportRoom[]
}

model RoomType {
    roomTypeId   Int    @id @default(autoincrement())
    roomTypeName String
    price        Float  @default(0)

    Room    Room[]
    Booking Booking[]
}

model RoomStatus {
    roomStatusId   Int    @id @default(autoincrement())
    roomStatusName String //Available, Occupied, Reserved, Cleaning, Maintenance
    Room           Room[]
}

model Booking {
    bookingId Int @id @default(autoincrement())
    count     Int @default(1) //‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô 

    customerId Int // Foreign key to Customer
    customer   Customer @relation(fields: [customerId], references: [customerId]) // Relationship with Customer

    roomId Int? // ‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å
    room   Room? @relation("MainRoom", fields: [roomId], references: [roomId]) // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ relation "MainRoom"

    pairRoomId Int? // ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    pairRoom   Room? @relation("PairRoom", fields: [pairRoomId], references: [roomId]) // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ relation "PairRoom"

    roomTypeId Int?
    roomType   RoomType? @relation(fields: [roomTypeId], references: [roomTypeId])

    frontId Int?
    front   Front? @relation(fields: [frontId], references: [frontId])

    total Float @default(0)

    checkInDate  DateTime
    checkOutDate DateTime

    createdAt   DateTime  @default(now())
    confirmedAt DateTime?
    cancelledAt DateTime?

    // paymentAt   DateTime?

    paymentStatusId Int           @default(1)
    paymentStatus   PaymentStatus @relation(fields: [paymentStatusId], references: [paymentStatusId])

    bookingStatusId Int           @default(1)
    bookingStatus   BookingStatus @relation(fields: [bookingStatusId], references: [bookingStatusId])

    paymentMethodId Int?
    paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [paymentMethodId])

    image Image[]

    BookingAddonListRelation BookingAddonListRelation[]
    Receipt                  Receipt?
}

model BookingAddonListRelation {
    bookingId          Int
    bookingAddonListId Int
    price              Float

    booking          Booking          @relation(fields: [bookingId], references: [bookingId], onDelete: Cascade)
    bookingAddonList BookingAddonList @relation(fields: [bookingAddonListId], references: [bookingAddonListId], onDelete: Cascade)

    @@id([bookingId, bookingAddonListId]) // Composite Primary Key
}

model BookingAddonList {
    bookingAddonListId Int      @id @default(autoincrement())
    createAt           DateTime @default(now())

    BookingAddonListRelation BookingAddonListRelation[]
    BookingAddon             BookingAddon[]
}

model BookingAddon {
    addonId            Int
    bookingAddonListId Int
    quantity           Int

    addon            Addon            @relation(fields: [addonId], references: [addonId], onDelete: Cascade)
    bookingAddonList BookingAddonList @relation(fields: [bookingAddonListId], references: [bookingAddonListId], onDelete: Cascade)

    @@id([addonId, bookingAddonListId]) // Composite Primary Key
}

model Addon {
    addonId      Int            @id @default(autoincrement())
    addonName    String
    price        Int
    BookingAddon BookingAddon[]
}

model BookingStatus {
    bookingStatusId   Int       @id @default(autoincrement())
    bookingStatusName String //Pending, Confirmed, Checked-in, Checked-out, Cancelled, No-show
    Bookings          Booking[]
}

model PaymentStatus {
    paymentStatusId   Int    @id @default(autoincrement())
    paymentStatusName String //Pending, Paid, Refunded, Cancelled

    Bookings Booking[]
}

model PaymentMethod {
    paymentMethodId   Int       @id @default(autoincrement())
    paymentMethodName String
    Booking           Booking[]
}

model Receipt {
    receiptId Int @id @default(autoincrement())

    createdAt DateTime @default(now())

    customerId Int
    customer   Customer @relation(fields: [customerId], references: [customerId], onDelete: Cascade)

    roomId Int
    room   Room @relation(fields: [roomId], references: [roomId], onDelete: Cascade)

    frontId Int
    front   Front @relation(fields: [frontId], references: [frontId], onDelete: Cascade)

    bookingId Int     @unique
    booking   Booking @relation(fields: [bookingId], references: [bookingId], onDelete: Cascade)
}

model Image {
    id         Int      @id @default(autoincrement())
    asset_id   String
    public_id  String
    url        String
    secure_url String
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    bookingId Int?
    booking   Booking? @relation(fields: [bookingId], references: [bookingId], onDelete: Cascade)

    customerId Int
    customer   Customer @relation(fields: [customerId], references: [customerId], onDelete: Cascade)
}
