

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//prisma ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á relationship ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡πÉ‡∏™‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ

// =========================
// ENUMS (‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó)
// =========================

// ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
enum UserRole {
  admin
  front
  housekeeping
}

// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
enum CleaningRequestStatus {
  PENDING      // ‡∏£‡∏≠‡πÅ‡∏°‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
  IN_PROGRESS  // ‡πÅ‡∏°‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
  COMPLETED    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
}

// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
enum CleaningReportStatus {
  PENDING   // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  CHECKED   // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß
  REPORTED  // ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏õ‡∏±‡∏ç‡∏´‡∏≤
}

// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á (‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á)
enum CleaningStatus {
  NORMAL   // ‡∏õ‡∏Å‡∏ï‡∏¥
  PROBLEM  // ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
}

// ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
enum RoomTypeEnum {
  SINGLE
  DOUBLE
  SIGNATURE
}

// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
enum RoomStatus {
  AVAILABLE    // ‡∏ß‡πà‡∏≤‡∏á
  OCCUPIED     // ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏û‡∏±‡∏Å
  RESERVED     // ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á
  CLEANING     // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
  MAINTENANCE  // ‡∏õ‡∏¥‡∏î‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
}

// ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡∏à‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å
enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  NO_SHOW
}

// =========================
// MODELS
// =========================

model User {
  id           Int      @id @default(autoincrement())
  name         String
  phone        String   @unique
  email        String   @unique
  role         UserRole
  licensePlate String?
  // Relations
  bookingsAsFront Booking[] @relation("FrontBooking")
  cleaningRequestsAsHousekeeping CleaningRequest[] @relation("HousekeepingCleaningRequest")
  cleaningRequestsAsFront CleaningRequest[] @relation("FrontCleaningRequest")
  cleaningReportsAsHousekeeping CleaningReport[] @relation("HousekeepingCleaningReport")
  cleaningReportsAsFront CleaningReport[] @relation("FrontCleaningReport")


  @@index([phone])
  @@index([id])
}

model CleaningRequest {
    requestId Int @id @default(autoincrement())

    //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
    requestAt DateTime @default(now())

    //‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏°‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
    receiveAt DateTime?

    //‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà
    updatedAt DateTime @default(now()) @updatedAt // **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ default**

    housekeepingId Int?
    housekeeping   User? @relation("HousekeepingCleaningRequest", fields: [housekeepingId], references: [id])

    frontId Int
    front   User @relation("FrontCleaningRequest", fields: [frontId], references: [id])

    cleaningRequestStatus CleaningRequestStatus @default(PENDING)
    CleaningRequestRoom CleaningRequestRoom[]

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏ö‡∏ö 1:1 ‡∏Å‡∏±‡∏ö CleaningReport
    CleaningReport CleaningReport?
}

model CleaningReport {
    reportId Int      @id @default(autoincrement())
    //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
    reportAt DateTime @default(now())

    housekeepingId Int
    housekeeping   User @relation("HousekeepingCleaningReport", fields: [housekeepingId], references: [id])

    frontId Int?
    front   User? @relation("FrontCleaningReport", fields: [frontId], references: [id])

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö CleaningRequest ‡πÅ‡∏ö‡∏ö 1:1
    requestId       Int             @unique
    cleaningRequest CleaningRequest @relation(fields: [requestId], references: [requestId], onDelete: Cascade)

    CleaningResults CleaningResults[]

    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå M:N ‡∏Å‡∏±‡∏ö Room ‡∏ú‡πà‡∏≤‡∏ô CleaningReportRoom
    CleaningReportRoom CleaningReportRoom[]

    cleaningReportStatus CleaningReportStatus @default(PENDING)
}

// üîó **‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö M:N**
model CleaningReportRoom {
    reportId Int
    roomNumber String

    cleaningReport  CleaningReport    @relation(fields: [reportId], references: [reportId], onDelete: Cascade)
    room            Room              @relation(fields: [roomNumber], references: [roomNumber], onDelete: Cascade)
    CleaningResults CleaningResults[]

    @@id([reportId, roomNumber]) // Composite Primary Key
}

model CleaningResults {
    reportId Int
    roomNumber String
    itemId   Int

    description String? @default("") // ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏

    cleaningStatus CleaningStatus @default(NORMAL)

    cleaningReport     CleaningReport     @relation(fields: [reportId], references: [reportId], onDelete: Cascade)
    cleaningList       CleaningList       @relation(fields: [itemId], references: [itemId], onDelete: Cascade)
    cleaningReportRoom CleaningReportRoom @relation(fields: [reportId, roomNumber], references: [reportId, roomNumber], onDelete: Cascade)

    @@id([reportId, roomNumber, itemId]) // Composite Primary Key ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô itemId ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô
}

//‡πÄ‡∏õ‡πá‡∏ô checkList ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô
model CleaningList {
    itemId          Int               @id @default(autoincrement())
    itemName        String
    CleaningResults CleaningResults[]
}

model Room {
    roomNumber String @id // ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô primary key
    floor      String @default("3")
    roomType   RoomTypeEnum @default(SINGLE)
    roomStatus RoomStatus @default(AVAILABLE)
    pairRoomNumber String?
    pairRoom   Room? @relation("RoomPairing", fields: [pairRoomNumber], references: [roomNumber])
    pairedWith Room[] @relation("RoomPairing")
    createdAt DateTime @default(now())
    Bookings     Booking[] @relation("MainRoom")
    PairBookings Booking[] @relation("PairRoom")
    CleaningRequestRoom CleaningRequestRoom[]
    CleaningReportRoom CleaningReportRoom[]
    @@index([roomNumber])
}

model CleaningRequestRoom {
    requestId Int
    roomNumber String
    description String? @default("")
    updatedAt DateTime @default(now()) @updatedAt
    cleaningRequest CleaningRequest @relation(fields: [requestId], references: [requestId], onDelete: Cascade)
    room            Room            @relation(fields: [roomNumber], references: [roomNumber], onDelete: Cascade)
    @@id([requestId, roomNumber])
}

// Booking
model Booking {
    bookingId Int @id @default(autoincrement())
    count     Int @default(1)
    customerName        String
    customerSurname     String
    customerPhone       String
    customerEmail       String
    customerIdCard      String
    customerLicensePlate String
    roomNumber String? // ‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å
    room   Room? @relation("MainRoom", fields: [roomNumber], references: [roomNumber])
    pairRoomNumber String? // ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    pairRoom   Room? @relation("PairRoom", fields: [pairRoomNumber], references: [roomNumber])
    roomType   RoomTypeEnum?
    frontId Int?
    front   User? @relation("FrontBooking", fields: [frontId], references: [id])
    total Float @default(0)
    checkInDate  DateTime
    checkOutDate DateTime
    createdAt   DateTime  @default(now())
    confirmedAt DateTime?
    cancelledAt DateTime?
    bookingStatus BookingStatus @default(PENDING)
    @@index([bookingId])
    @@index([roomNumber])
    @@index([frontId])
}

