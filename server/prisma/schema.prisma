// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

//prisma ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏°‡∏≠‡∏á relationship ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏≠‡∏≤‡∏°‡∏≤‡πÉ‡∏™‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏Å‡∏•‡πâ

model User {
    userId       Int      @id @default(autoincrement())
    userEmail    String   @unique // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô User
    userPassword String?
    userName     String? // ‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô User
    userSurName  String? // ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô User
    userNumPhone String?  @unique // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏Å‡πá‡∏ö‡πÉ‡∏ô User
    userRole     UserRole @default(customer)
    prefix       String? //‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤
    licensePlate String? // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö customer
    stdId        String? // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö customer
    idCard       String? // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö customer
    userEnable   Boolean  @default(true)
    createdAt    DateTime @default(now())
    // Relations
    bookingsAsCustomer Booking[] @relation("CustomerBooking")
    bookingsAsFront Booking[] @relation("FrontBooking")
    cleaningRequestsAsHousekeeping CleaningRequest[] @relation("HousekeepingCleaningRequest")
    cleaningRequestsAsFront CleaningRequest[] @relation("FrontCleaningRequest")
    cleaningReportsAsHousekeeping CleaningReport[] @relation("HousekeepingCleaningReport")
    cleaningReportsAsFront CleaningReport[] @relation("FrontCleaningReport")
    repairRequestsAsMaintenance RepairRequest[] @relation("MaintenanceRepairRequest")
    repairRequestsAsFront RepairRequest[] @relation("FrontRepairRequest")
    repairReportsAsMaintenance RepairReport[] @relation("MaintenanceRepairReport")
    repairReportsAsFront RepairReport[] @relation("FrontRepairReport")

    @@index([userEmail])
    @@index([userId])
}

enum UserRole {
    admin
    customer
    front
    housekeeping
    maintenance
}

// ‡∏•‡∏ö model Customer, Housekeeping, Maintenance, Front ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÉ‡∏ô model ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ userId ‡πÅ‡∏ó‡∏ô ...

model CleaningRequest {
    requestId Int @id @default(autoincrement())

    //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
    requestAt DateTime @default(now())

    //‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏°‡πà‡∏ö‡πâ‡∏≤‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á
    receiveAt DateTime?

    //‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà
    updatedAt DateTime @default(now()) @updatedAt // **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ default**

    housekeepingId Int?
    housekeeping   User? @relation("HousekeepingCleaningRequest", fields: [housekeepingId], references: [userId])

    frontId Int
    front   User @relation("FrontCleaningRequest", fields: [frontId], references: [userId])

    cleaningRequestStatus CleaningRequestStatus @default(PENDING)
    CleaningRequestRoom CleaningRequestRoom[]

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏ö‡∏ö 1:1 ‡∏Å‡∏±‡∏ö CleaningReport
    CleaningReport CleaningReport?
}

enum CleaningRequestStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
}

model CleaningRequestRoom {
    requestId Int
    roomId    Int

    description String? @default("") //‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏

    //‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏´‡∏£‡πà
    updatedAt DateTime @default(now()) @updatedAt // **‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ default**

    cleaningRequest CleaningRequest @relation(fields: [requestId], references: [requestId], onDelete: Cascade)
    room            Room            @relation(fields: [roomId], references: [roomId], onDelete: Cascade)

    @@id([requestId, roomId]) // Composite Primary Key
}

model CleaningReport {
    reportId Int      @id @default(autoincrement())
    //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
    reportAt DateTime @default(now())

    housekeepingId Int
    housekeeping   User @relation("HousekeepingCleaningReport", fields: [housekeepingId], references: [userId])

    frontId Int?
    front   User? @relation("FrontCleaningReport", fields: [frontId], references: [userId])

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö CleaningRequest ‡πÅ‡∏ö‡∏ö 1:1
    requestId       Int             @unique
    cleaningRequest CleaningRequest @relation(fields: [requestId], references: [requestId], onDelete: Cascade)

    CleaningResults CleaningResults[]

    // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå M:N ‡∏Å‡∏±‡∏ö Room ‡∏ú‡πà‡∏≤‡∏ô CleaningReportRoom
    CleaningReportRoom CleaningReportRoom[]

    cleaningReportStatus CleaningReportStatus @default(PENDING)
}

enum CleaningReportStatus {
    PENDING
    CHECKED
    REPORTED
}

// üîó **‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö M:N**
model CleaningReportRoom {
    reportId Int
    roomId   Int

    cleaningReport  CleaningReport    @relation(fields: [reportId], references: [reportId], onDelete: Cascade)
    room            Room              @relation(fields: [roomId], references: [roomId], onDelete: Cascade)
    CleaningResults CleaningResults[]

    @@id([reportId, roomId]) // Composite Primary Key
}

model CleaningResults {
    reportId Int
    roomId   Int
    itemId   Int

    description String? @default("") // ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏

    cleaningStatus CleaningStatus @default(NORMAL)

    cleaningReport     CleaningReport     @relation(fields: [reportId], references: [reportId], onDelete: Cascade)
    cleaningList       CleaningList       @relation(fields: [itemId], references: [itemId], onDelete: Cascade)
    cleaningReportRoom CleaningReportRoom @relation(fields: [reportId, roomId], references: [reportId, roomId], onDelete: Cascade)

    @@id([reportId, roomId, itemId]) // Composite Primary Key ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô itemId ‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô
}

//‡πÄ‡∏õ‡πá‡∏ô checkList ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô
model CleaningList {
    itemId          Int               @id @default(autoincrement())
    itemName        String
    CleaningResults CleaningResults[]
}

//‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ‡∏Ç‡∏≠‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏õ‡∏Å‡∏ï‡∏¥, ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
enum CleaningStatus {
    NORMAL
    PROBLEM
}

//‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°
model RepairRequest {
    requestId Int @id @default(autoincrement())

    //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡πÉ‡∏ö‡∏ã‡πà‡∏≠‡∏°
    requestAt DateTime @default(now())

    maintenanceId Int?
    maintenance   User? @relation("MaintenanceRepairRequest", fields: [maintenanceId], references: [userId])

    frontId Int
    front   User @relation("FrontRepairRequest", fields: [frontId], references: [userId])

    repairRequestStatus RepairRequestStatus @default(PENDING)
    RepairRequestRoom RepairRequestRoom[]
    RepairReport      RepairReport?
}

enum RepairRequestStatus {
    PENDING
    IN_PROGRESS
    COMPLETED
}

//‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏ã‡πà‡∏≠‡∏°
model RepairRequestRoom {
    requestId Int
    roomId    Int

    description String? //‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏

    repairRequest RepairRequest @relation(fields: [requestId], references: [requestId], onDelete: Cascade)
    room          Room          @relation(fields: [roomId], references: [roomId], onDelete: Cascade)

    @@id([requestId, roomId])
}

//‡πÉ‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°
model RepairReport {
    reportId Int @id @default(autoincrement())

    //‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ã‡πà‡∏≠‡∏°
    reportAt DateTime @default(now())

    maintenanceId Int
    maintenance   User @relation("MaintenanceRepairReport", fields: [maintenanceId], references: [userId])

    frontId Int
    front   User @relation("FrontRepairReport", fields: [frontId], references: [userId])

    requestId     Int           @unique //RepairReport 1:1 RepairRequest
    repairRequest RepairRequest @relation(fields: [requestId], references: [requestId], onDelete: Cascade)

    RepairReportRoom RepairReportRoom[]
}

//‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡πÉ‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡πà‡∏≠‡∏°
model RepairReportRoom {
    reportId Int
    roomId   Int

    description String? //‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏

    repairReport RepairReport @relation(fields: [reportId], references: [reportId], onDelete: Cascade)
    room         Room         @relation(fields: [roomId], references: [roomId], onDelete: Cascade)

    repairStatus RepairStatus @default(FIXED)

    @@id([reportId, roomId])
}

//‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ [‡∏ã‡πà‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß, ‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤(‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ã‡πà‡∏≠‡∏°‡πÑ‡∏î‡πâ)]
enum RepairStatus {
    FIXED
    UNFIXABLE
}

// ‡∏•‡∏ö model RoomType ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô enum

enum RoomTypeEnum {
    SINGLE
    DOUBLE
    SIGNATURE
}

enum RoomStatus {
    AVAILABLE
    OCCUPIED
    RESERVED
    CLEANING
    MAINTENANCE
}

model Room {
    roomId     Int    @id @default(autoincrement())
    roomNumber String @unique
    floor      String @default("3")

    roomType   RoomTypeEnum @default(SINGLE)

    roomStatus RoomStatus @default(AVAILABLE)

    pairRoomId Int?
    pairRoom   Room? @relation("RoomPairing", fields: [pairRoomId], references: [roomId])
    pairedWith Room[] @relation("RoomPairing")
    createdAt DateTime @default(now())
    Bookings     Booking[] @relation("MainRoom")
    PairBookings Booking[] @relation("PairRoom")
    CleaningRequestRoom CleaningRequestRoom[]
    RepairRequestRoom   RepairRequestRoom[]
    CleaningReportRoom CleaningReportRoom[]
    RepairReportRoom RepairReportRoom[]
    @@index([roomNumber])
    @@index([roomId])
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏° enum BookingStatus, PaymentStatus, PaymentMethod ‡∏Å‡πà‡∏≠‡∏ô model Booking

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  NO_SHOW
}

model Booking {
    bookingId Int @id @default(autoincrement())
    count     Int @default(1) //‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô 

    customerId Int // Foreign key to Customer
    customer   User @relation("CustomerBooking", fields: [customerId], references: [userId]) // Relationship with Customer

    roomId Int? // ‡∏´‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏Å
    room   Room? @relation("MainRoom", fields: [roomId], references: [roomId]) // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ relation "MainRoom"

    pairRoomId Int? // ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    pairRoom   Room? @relation("PairRoom", fields: [pairRoomId], references: [roomId]) // ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠ relation "PairRoom"

    roomType   RoomTypeEnum? // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å roomTypeId ‡πÄ‡∏õ‡πá‡∏ô enum

    frontId Int?
    front   User? @relation("FrontBooking", fields: [frontId], references: [userId])

    total Float @default(0)

    checkInDate  DateTime
    checkOutDate DateTime

    createdAt   DateTime  @default(now())
    confirmedAt DateTime?
    cancelledAt DateTime?

    bookingStatus BookingStatus @default(PENDING)
    BookingAddonListRelation BookingAddonListRelation[]

    @@index([bookingId])
    @@index([customerId])
    @@index([roomId])
    @@index([frontId])
}

model BookingAddonListRelation {
    bookingId          Int
    bookingAddonListId Int
    price              Float

    booking          Booking          @relation(fields: [bookingId], references: [bookingId], onDelete: Cascade)
    bookingAddonList BookingAddonList @relation(fields: [bookingAddonListId], references: [bookingAddonListId], onDelete: Cascade)

    @@id([bookingId, bookingAddonListId]) // Composite Primary Key
}

model BookingAddonList {
    bookingAddonListId Int      @id @default(autoincrement())
    createAt           DateTime @default(now())

    BookingAddonListRelation BookingAddonListRelation[]
    BookingAddon             BookingAddon[]
}

model BookingAddon {
    addonId            Int
    bookingAddonListId Int
    quantity           Int

    addon            Addon            @relation(fields: [addonId], references: [addonId], onDelete: Cascade)
    bookingAddonList BookingAddonList @relation(fields: [bookingAddonListId], references: [bookingAddonListId], onDelete: Cascade)

    @@id([addonId, bookingAddonListId]) // Composite Primary Key
}

model Addon {
    addonId      Int            @id @default(autoincrement())
    addonName    String
    addonName_en String
    addonName_th String
    price        Int
    BookingAddon BookingAddon[]

    @@index([addonId])
}

